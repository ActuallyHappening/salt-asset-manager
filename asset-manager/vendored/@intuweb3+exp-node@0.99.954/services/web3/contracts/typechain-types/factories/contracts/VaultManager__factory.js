/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, utils } from "ethers";
const _abi = [
    {
        inputs: [],
        name: "InvalidAdminThreshold",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidRotateThreshold",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidTransactionThreshold",
        type: "error",
    },
    {
        inputs: [],
        name: "TooManyUsers",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "user",
                type: "address",
            },
            {
                internalType: "bool",
                name: "isRegistered",
                type: "bool",
            },
        ],
        name: "UserAlreadyInVault",
        type: "error",
    },
    {
        inputs: [],
        name: "UserAlreadyRegistered",
        type: "error",
    },
    {
        inputs: [],
        name: "UserNotInVault",
        type: "error",
    },
    {
        inputs: [],
        name: "UserNotRegistered",
        type: "error",
    },
    {
        inputs: [],
        name: "VaultNotComplete",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "uint256",
                name: "txId",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "string",
                name: "transactionInfo",
                type: "string",
            },
        ],
        name: "TransactionProposed",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "uint256",
                name: "txId",
                type: "uint256",
            },
            {
                indexed: true,
                internalType: "address",
                name: "user",
                type: "address",
            },
            {
                indexed: false,
                internalType: "string",
                name: "signedTransaction",
                type: "string",
            },
        ],
        name: "TransactionUserConfirmed",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address[]",
                name: "users",
                type: "address[]",
            },
            {
                indexed: false,
                internalType: "string",
                name: "_masterPubKey",
                type: "string",
            },
        ],
        name: "VaultCompleted",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "string",
                name: "name",
                type: "string",
            },
        ],
        name: "VaultNewName",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "user",
                type: "address",
            },
        ],
        name: "VaultUserInitialized",
        type: "event",
    },
    {
        inputs: [],
        name: "VAULT_USER_COUNT_LIMIT",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "transactionVotes",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        name: "transactions",
        outputs: [
            {
                internalType: "uint8",
                name: "votesNeeded",
                type: "uint8",
            },
            {
                internalType: "uint8",
                name: "votesFor",
                type: "uint8",
            },
            {
                internalType: "uint256",
                name: "id",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "user",
                type: "address",
            },
        ],
        name: "userInfos",
        outputs: [
            {
                internalType: "bool",
                name: "isPartOfVault",
                type: "bool",
            },
            {
                internalType: "bool",
                name: "isRegistered",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "usersMapping",
        outputs: [
            {
                internalType: "address",
                name: "userAddress",
                type: "address",
            },
            {
                internalType: "bool",
                name: "isRegistered",
                type: "bool",
            },
            {
                internalType: "uint8",
                name: "index",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "vault",
        outputs: [
            {
                internalType: "uint8",
                name: "registeredUsersCount",
                type: "uint8",
            },
            {
                internalType: "uint8",
                name: "rotateThreshold",
                type: "uint8",
            },
            {
                internalType: "uint8",
                name: "transactionThreshold",
                type: "uint8",
            },
            {
                internalType: "uint8",
                name: "adminThreshold",
                type: "uint8",
            },
            {
                internalType: "uint8",
                name: "usersCount",
                type: "uint8",
            },
            {
                internalType: "uint256",
                name: "createdDate",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "createdBlock",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "transactionCount",
                type: "uint256",
            },
            {
                internalType: "bool",
                name: "completed",
                type: "bool",
            },
            {
                internalType: "string",
                name: "encryptionMessage",
                type: "string",
            },
            {
                internalType: "string",
                name: "seed",
                type: "string",
            },
            {
                internalType: "string",
                name: "name",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "vaultInfos",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint8",
                        name: "registeredUsersCount",
                        type: "uint8",
                    },
                    {
                        internalType: "uint8",
                        name: "rotateThreshold",
                        type: "uint8",
                    },
                    {
                        internalType: "uint8",
                        name: "transactionThreshold",
                        type: "uint8",
                    },
                    {
                        internalType: "uint8",
                        name: "adminThreshold",
                        type: "uint8",
                    },
                    {
                        internalType: "uint8",
                        name: "usersCount",
                        type: "uint8",
                    },
                    {
                        internalType: "uint256",
                        name: "createdDate",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "createdBlock",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "transactionCount",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "completed",
                        type: "bool",
                    },
                    {
                        internalType: "string",
                        name: "encryptionMessage",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "seed",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "name",
                        type: "string",
                    },
                    {
                        internalType: "address[]",
                        name: "users",
                        type: "address[]",
                    },
                ],
                internalType: "struct VaultManager.Vault",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
export class VaultManager__factory {
    static abi = _abi;
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
