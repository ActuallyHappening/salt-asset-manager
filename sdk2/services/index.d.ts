import { ethers, Signer, providers } from "ethers";
import { Transaction, Vault, Proposal, VaultAllInfo } from "../services/web3/types/index.js";
export declare function createIntuAccount(addressList: any[], vaultName: string, rotationThreshold: number, transactionThreshold: number, adminThreshold: number, signer: Signer, returnHash?: boolean): Promise<unknown>;
export declare function createPolybaseKey(vaultAddress: string, signer: Signer, intuSignature?: string): Promise<import("./cryptography/types/models.js").PolybaseKeyResponse>;
export declare function preRegistration(vaultAddress: string, signer: Signer, intuSignature?: string, returnHash?: boolean): Promise<string | ethers.ContractTransaction>;
export declare function automateRegistration(vaultAddress: string, signer: Signer, nostrNode?: string, intuSignature?: string): Promise<boolean>;
export declare function registerAllSteps(vaultAddress: string, signer: Signer, intuSignature?: string, nostrNode?: string, returnHash?: boolean): Promise<string | ethers.ContractTransaction>;
export declare function registerAllReshareSteps(vaultAddress: string, signer: Signer, intuSignature?: string, nostrNode?: string, returnHash?: boolean): Promise<string | ethers.ContractTransaction>;
export declare function completeVault(vaultAddress: string, signer: Signer, returnHash?: boolean): Promise<string | ethers.ContractTransaction>;
export declare function submitTransaction(to: string, value: string | Number, chainId: string | Number, nonce: string | Number, data: string, gasPrice: string | Number, gas: string | Number, vaultAddress: string, signer: Signer, notes?: string, returnHash?: boolean, sendingProvider?: any): Promise<string | ethers.ContractTransaction | undefined>;
export declare function submitTransactionSolana(message: string, vaultAddress: string, signer: Signer, notes?: string): Promise<string | ethers.ContractTransaction>;
export declare function signTx(vaultAddress: string, txId: number, signer: Signer, intuSignature?: string, experimental?: boolean, returnHash?: boolean): Promise<string | ethers.ContractTransaction | undefined>;
export declare function combineSignedTx(vaultAddress: string, txId: number, signer: Signer, experimental?: boolean): Promise<string | undefined>;
export declare function getVaults(userAddress: string, provider: providers.Provider): Promise<VaultAllInfo[]>;
export declare function getVaultSingle(userAddress: string, provider: providers.Provider): Promise<VaultAllInfo | null>;
export declare function getVaultsWithoutTransactions(userAddress: string, provider: providers.Provider): Promise<Vault[]>;
export declare function getVaultSingleWithDEOA(masterPublicAddress: string, provider: providers.Provider): Promise<VaultAllInfo[]>;
export declare function getAllTransactions(vaultAddress: string, provider: providers.Provider): Promise<Transaction[]>;
export declare function getTransaction(vaultAddress: string, txId: number, provider: providers.Provider): Promise<Transaction>;
export declare function getTransactionLean(vaultAddress: string, txId: number, provider: providers.Provider): Promise<Transaction>;
export declare function automateRotateRegistration(vaultAddress: string, signer: Signer, nostrNode?: string): Promise<boolean>;
export declare function getProposal(vaultAddress: string, proposalId: number, provider: providers.Provider): Promise<Proposal>;
export declare function getProposedUser(vaultAddress: string, provider: providers.Provider): Promise<string[]>;
export declare function getUserCompletedRotationRegistrationCount(vaultAddress: string, provider: providers.Provider): Promise<number>;
